// Generated by BUCKLESCRIPT VERSION 1.9.1, PLEASE EDIT WITH CARE
'use strict';

var List        = require("bs-platform/lib/js/list.js");
var $$Array     = require("bs-platform/lib/js/array.js");
var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var Printf      = require("bs-platform/lib/js/printf.js");
var Remidi      = require("./remidi.js");
var $$String    = require("bs-platform/lib/js/string.js");
var Caml_obj    = require("bs-platform/lib/js/caml_obj.js");
var Caml_array  = require("bs-platform/lib/js/caml_array.js");
var Caml_int32  = require("bs-platform/lib/js/caml_int32.js");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

function string_to_int_list(str) {
  var acc = [/* [] */0];
  $$String.iter((function (c) {
          acc[0] = /* :: */[
            c,
            acc[0]
          ];
          return /* () */0;
        }), str);
  return List.rev(acc[0]);
}

function crop_string(str) {
  var length = str.length;
  if (length >= 8) {
    return $$String.sub(str, 0, 8);
  } else {
    var missing = 8 - length | 0;
    var blank = $$String.make(missing / 2 | 0, /* " " */32);
    if (missing % 2) {
      return blank + (str + (blank + " "));
    } else {
      return blank + (str + blank);
    }
  }
}

function setRing(t, ring, value) {
  return Remidi.sendMessageList(t[/* output */1], /* :: */[
              176,
              /* :: */[
                (112 + ring | 0) - 1 | 0,
                /* :: */[
                  value,
                  /* [] */0
                ]
              ]
            ]);
}

function setButton(t, side, row, column, value) {
  var start = side !== 0 ? (
      row !== 0 ? 49 : 40
    ) : (
      row !== 0 ? 32 : 24
    );
  return Remidi.sendMessageList(t[/* output */1], /* :: */[
              176,
              /* :: */[
                (start + column | 0) - 1 | 0,
                /* :: */[
                  value ? 1 : 0,
                  /* [] */0
                ]
              ]
            ]);
}

function setButtonRaw(t, button, value) {
  return Remidi.sendMessageList(t[/* output */1], /* :: */[
              176,
              /* :: */[
                button,
                /* :: */[
                  value,
                  /* [] */0
                ]
              ]
            ]);
}

function clear(t) {
  Remidi.sendMessageList(t[/* output */1], /* :: */[
        240,
        /* :: */[
          0,
          /* :: */[
            32,
            /* :: */[
              41,
              /* :: */[
                3,
                /* :: */[
                  3,
                  /* :: */[
                    18,
                    /* :: */[
                      0,
                      /* :: */[
                        4,
                        /* :: */[
                          0,
                          /* :: */[
                            2,
                            /* :: */[
                              2,
                              /* :: */[
                                1,
                                /* :: */[
                                  247,
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]);
  var _n = 0;
  while(true) {
    var n = _n;
    if (n > 8) {
      return /* () */0;
    } else {
      setRing(t, n, 0);
      setButtonRaw(t, 24 + n | 0, 0);
      setButtonRaw(t, 32 + n | 0, 0);
      setButtonRaw(t, 40 + n | 0, 0);
      setButtonRaw(t, 49 + n | 0, 0);
      _n = n + 1 | 0;
      continue ;
      
    }
  };
}

function init(t) {
  Remidi.sendMessageList(t[/* output */1], /* :: */[
        240,
        /* :: */[
          0,
          /* :: */[
            32,
            /* :: */[
              41,
              /* :: */[
                3,
                /* :: */[
                  3,
                  /* :: */[
                    18,
                    /* :: */[
                      0,
                      /* :: */[
                        4,
                        /* :: */[
                          0,
                          /* :: */[
                            1,
                            /* :: */[
                              1,
                              /* :: */[
                                247,
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]);
  return clear(t);
}

function writeLabelRaw(t, str, display, position) {
  var start_001 = /* :: */[
    0,
    /* :: */[
      32,
      /* :: */[
        41,
        /* :: */[
          3,
          /* :: */[
            3,
            /* :: */[
              18,
              /* :: */[
                0,
                /* :: */[
                  4,
                  /* :: */[
                    0,
                    /* :: */[
                      2,
                      /* :: */[
                        1,
                        /* :: */[
                          position,
                          /* :: */[
                            display,
                            /* :: */[
                              4,
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ];
  var start = /* :: */[
    240,
    start_001
  ];
  var str_list = string_to_int_list(str);
  var msg = Pervasives.$at(start, Pervasives.$at(str_list, /* :: */[
            247,
            /* [] */0
          ]));
  return Remidi.sendMessageList(t[/* output */1], msg);
}

function writeLabel(t, str, side, row, column) {
  var display = side !== 0 ? (
      row !== 0 ? 4 : 2
    ) : (
      row !== 0 ? 3 : 1
    );
  var msg = crop_string(str);
  return writeLabelRaw(t, msg, display, Caml_int32.imul(column - 1 | 0, 9));
}

function array_find_index(array, elem) {
  var found = [/* None */0];
  $$Array.iteri((function (i, e) {
          if (Caml_obj.caml_compare(e, elem)) {
            return 0;
          } else {
            found[0] = /* Some */[i];
            return /* () */0;
          }
        }), array);
  return found[0];
}

function decode(message) {
  if (message.length === 3) {
    var data1 = Caml_array.caml_array_get(message, 0);
    var data2 = Caml_array.caml_array_get(message, 1);
    var data3 = Caml_array.caml_array_get(message, 2);
    if (data1 !== 176) {
      return /* IgnoredMsg */Block.__(4, [message]);
    } else if (data2 >= 8 && data2 <= 15) {
      return /* KnobMsg */Block.__(0, [
                data2 - 7 | 0,
                data3
              ]);
    } else if (data2 >= 16 && data2 <= 23) {
      return /* SliderMsg */Block.__(2, [
                data2 - 15 | 0,
                data3
              ]);
    } else if (data2 >= 24 && data2 <= 31) {
      return /* BottonMsg */Block.__(3, [
                /* tuple */[
                  /* Left */0,
                  /* Top */0,
                  data2 - 23 | 0
                ],
                data3
              ]);
    } else if (data2 >= 32 && data2 <= 39) {
      return /* BottonMsg */Block.__(3, [
                /* tuple */[
                  /* Left */0,
                  /* Bottom */1,
                  data2 - 31 | 0
                ],
                data3
              ]);
    } else if (data2 >= 40 && data2 <= 47) {
      return /* BottonMsg */Block.__(3, [
                /* tuple */[
                  /* Right */1,
                  /* Top */0,
                  data2 - 39 | 0
                ],
                data3
              ]);
    } else if (data2 >= 48 && data2 <= 55) {
      return /* BottonMsg */Block.__(3, [
                /* tuple */[
                  /* Right */1,
                  /* Bottom */1,
                  data2 - 47 | 0
                ],
                data3
              ]);
    } else if (data2 >= 56 && data2 <= 63) {
      var delta = data3 >= 65 ? 64 - data3 | 0 : data3;
      return /* EncoderMsg */Block.__(1, [
                data2 - 55 | 0,
                delta
              ]);
    } else {
      return /* IgnoredMsg */Block.__(4, [message]);
    }
  } else {
    return /* IgnoredMsg */Block.__(4, [message]);
  }
}

function paramName(parameter) {
  return parameter[/* name */0];
}

function paramGroup(parameter) {
  var match = parameter[/* group */4];
  if (match) {
    return match[0];
  } else {
    return "";
  }
}

function paramPath(parameter) {
  var match = parameter[/* group */4];
  if (match) {
    return "/" + (match[0] + ("/" + parameter[/* name */0]));
  } else {
    return "/root/" + parameter[/* name */0];
  }
}

function applyAbsValue(parameter, msg) {
  var match = parameter[/* value */2];
  var value;
  switch (match.tag | 0) {
    case 0 : 
        value = /* Bool */Block.__(0, [+(msg !== 0)]);
        break;
    case 1 : 
        value = /* Float */Block.__(1, [
            match[0],
            match[1],
            match[2],
            msg
          ]);
        break;
    case 2 : 
        var n = match[1];
        var raw = msg / 127.0 * (n - 1.0);
        value = /* Enum */Block.__(2, [
            match[0],
            n,
            raw
          ]);
        break;
    
  }
  return /* record */[
          /* name */parameter[/* name */0],
          /* kind */parameter[/* kind */1],
          /* value */value,
          /* pushed */parameter[/* pushed */3],
          /* group */parameter[/* group */4]
        ];
}

function applyToggleValue(parameter, msg) {
  var pushed = +(msg !== 0);
  var value = parameter[/* value */2];
  var value$1;
  switch (value.tag | 0) {
    case 0 : 
        value$1 = pushed ? /* Bool */Block.__(0, [1 - value[0]]) : value;
        break;
    case 1 : 
        var max = value[2];
        var min = value[1];
        var f = value[0];
        value$1 = value[3] === 0.0 && pushed ? /* Float */Block.__(1, [
              f,
              min,
              max,
              127.0
            ]) : (
            pushed ? /* Float */Block.__(1, [
                  f,
                  min,
                  max,
                  0.0
                ]) : value
          );
        break;
    case 2 : 
        var n = value[1];
        var elems = value[0];
        value$1 = value[2] === 0.0 && pushed ? /* Enum */Block.__(2, [
              elems,
              n,
              n - 1.0
            ]) : (
            pushed ? /* Enum */Block.__(2, [
                  elems,
                  n,
                  0.0
                ]) : value
          );
        break;
    
  }
  return /* record */[
          /* name */parameter[/* name */0],
          /* kind */parameter[/* kind */1],
          /* value */value$1,
          /* pushed */pushed,
          /* group */parameter[/* group */4]
        ];
}

function applyPushValue(parameter, msg) {
  var pushed = +(msg !== 0);
  var match = parameter[/* value */2];
  var value;
  switch (match.tag | 0) {
    case 0 : 
        value = /* Bool */Block.__(0, [pushed]);
        break;
    case 1 : 
        value = /* Float */Block.__(1, [
            match[0],
            match[1],
            match[2],
            pushed ? 127.0 : 0.0
          ]);
        break;
    case 2 : 
        var n = match[1];
        value = /* Enum */Block.__(2, [
            match[0],
            n,
            pushed ? n - 1.0 : 0.0
          ]);
        break;
    
  }
  return /* record */[
          /* name */parameter[/* name */0],
          /* kind */parameter[/* kind */1],
          /* value */value,
          /* pushed */pushed,
          /* group */parameter[/* group */4]
        ];
}

function applyRadioValue(parameter, msg) {
  var match = parameter[/* value */2];
  var value;
  switch (match.tag | 0) {
    case 0 : 
        value = /* Bool */Block.__(0, [/* true */1]);
        break;
    case 1 : 
        value = /* Float */Block.__(1, [
            match[0],
            match[1],
            match[2],
            msg
          ]);
        break;
    case 2 : 
        var n = match[1];
        var value$1 = msg - 1 | 0;
        var value$2 = value$1 >= n ? n - 1.0 : value$1;
        value = /* Enum */Block.__(2, [
            match[0],
            n,
            value$2
          ]);
        break;
    
  }
  return /* record */[
          /* name */parameter[/* name */0],
          /* kind */parameter[/* kind */1],
          /* value */value,
          /* pushed */parameter[/* pushed */3],
          /* group */parameter[/* group */4]
        ];
}

function applyCountValue(parameter, msg) {
  var pushed = +(msg !== 0);
  var match = parameter[/* value */2];
  var value;
  switch (match.tag | 0) {
    case 0 : 
        var v = match[0];
        value = /* Bool */Block.__(0, [pushed ? 1 - v : v]);
        break;
    case 1 : 
        var v$1 = match[3];
        var value$1 = v$1 + 1.0;
        var value$2 = value$1 > 127.0 ? 0.0 : value$1;
        value = /* Float */Block.__(1, [
            match[0],
            match[1],
            match[2],
            pushed ? value$2 : v$1
          ]);
        break;
    case 2 : 
        if (pushed) {
          var n = match[1];
          var value$3 = match[2] + 1.0;
          var value$4 = value$3 >= n ? 0.0 : value$3;
          value = /* Enum */Block.__(2, [
              match[0],
              n,
              value$4
            ]);
        } else {
          value = parameter[/* value */2];
        }
        break;
    
  }
  return /* record */[
          /* name */parameter[/* name */0],
          /* kind */parameter[/* kind */1],
          /* value */value,
          /* pushed */pushed,
          /* group */parameter[/* group */4]
        ];
}

function applyPlusMinusValue(parameter, msg) {
  var pushed = +(msg !== 0);
  var match = parameter[/* value */2];
  var value;
  switch (match.tag | 0) {
    case 0 : 
        value = /* Bool */Block.__(0, [msg < 0 ? /* false */0 : /* true */1]);
        break;
    case 1 : 
        var v = match[3];
        var delta = msg < 0 ? -1.0 : 1.0;
        var value$1 = v + delta;
        var value$2 = value$1 > 127.0 ? 127.0 : (
            value$1 < 0.0 ? 0.0 : value$1
          );
        value = /* Float */Block.__(1, [
            match[0],
            match[1],
            match[2],
            pushed ? value$2 : v
          ]);
        break;
    case 2 : 
        var index = match[2];
        var n = match[1];
        var delta$1 = msg < 0 ? -1.0 : 1.0;
        var index$1 = pushed ? index + delta$1 : index;
        var index$2 = index$1 >= n ? n - 1.0 : (
            index$1 < 0.0 ? 0.0 : index$1
          );
        value = /* Enum */Block.__(2, [
            match[0],
            n,
            index$2
          ]);
        break;
    
  }
  return /* record */[
          /* name */parameter[/* name */0],
          /* kind */parameter[/* kind */1],
          /* value */value,
          /* pushed */parameter[/* pushed */3],
          /* group */parameter[/* group */4]
        ];
}

function applyRelValue(parameter, msg) {
  var match = parameter[/* value */2];
  var value;
  switch (match.tag | 0) {
    case 0 : 
        var v = match[0];
        value = /* Bool */Block.__(0, [msg < 0 && v ? /* false */0 : (
                msg > 0 && !v ? /* true */1 : v
              )]);
        break;
    case 1 : 
        var v$1 = match[3] + msg;
        var v$2 = v$1 > 127.0 ? 127.0 : (
            v$1 < 0.0 ? 0.0 : v$1
          );
        value = /* Float */Block.__(1, [
            match[0],
            match[1],
            match[2],
            v$2
          ]);
        break;
    case 2 : 
        var n = match[1];
        var value$1 = match[2] + msg * 0.25;
        var value$2 = value$1 < 0.0 ? 0.0 : (
            value$1 >= n ? n - 1.0 : value$1
          );
        value = /* Enum */Block.__(2, [
            match[0],
            n,
            value$2
          ]);
        break;
    
  }
  return /* record */[
          /* name */parameter[/* name */0],
          /* kind */parameter[/* kind */1],
          /* value */value,
          /* pushed */parameter[/* pushed */3],
          /* group */parameter[/* group */4]
        ];
}

function paramString(parameter) {
  var match = parameter[/* value */2];
  switch (match.tag | 0) {
    case 0 : 
        if (match[0]) {
          return "on";
        } else {
          return "off";
        }
    case 1 : 
        return Curry._3(match[0], match[1], match[2], match[3]);
    case 2 : 
        var index = match[2];
        var n = match[1];
        if (index >= n) {
          console.log(Pervasives.string_of_float(index));
        }
        var index$1 = index >= n ? n - 1.0 : (
            index < 0.0 ? 0.0 : index
          );
        return Caml_array.caml_array_get(match[0], index$1 | 0);
    
  }
}

function paramEncoder(parameter) {
  var match = parameter[/* value */2];
  switch (match.tag | 0) {
    case 0 : 
        if (match[0]) {
          return 11;
        } else {
          return 0;
        }
    case 1 : 
        return 12.0 * match[3] / 127.0 | 0;
    case 2 : 
        return match[2] / (match[1] - 1.0) * 12.0 | 0;
    
  }
}

function paramInt(parameter) {
  var match = parameter[/* value */2];
  switch (match.tag | 0) {
    case 0 : 
        if (match[0]) {
          return 1;
        } else {
          return 0;
        }
    case 1 : 
        return match[3] | 0;
    case 2 : 
        return match[2] | 0;
    
  }
}

function paramFloat(parameter) {
  var match = parameter[/* value */2];
  switch (match.tag | 0) {
    case 0 : 
        if (match[0]) {
          return 127.0;
        } else {
          return 0.0;
        }
    case 1 : 
        return match[3];
    case 2 : 
        return match[2];
    
  }
}

function parameBool(parameter) {
  var match = parameter[/* value */2];
  switch (match.tag | 0) {
    case 0 : 
        return match[0];
    case 1 : 
        return +(match[3] > 64.0);
    case 2 : 
        return +(match[2] !== 0.0);
    
  }
}

function paramDisplay(t, parameter) {
  var match = parameter[/* kind */1];
  switch (match.tag | 0) {
    case 0 : 
        var column = match[0];
        writeLabel(t, parameter[/* name */0], /* Left */0, /* Top */0, column);
        writeLabel(t, paramString(parameter), /* Left */0, /* Bottom */1, column);
        return setRing(t, column, paramEncoder(parameter));
    case 1 : 
        var column$1 = match[0];
        writeLabel(t, parameter[/* name */0], /* Left */0, /* Top */0, column$1);
        return writeLabel(t, paramString(parameter), /* Left */0, /* Bottom */1, column$1);
    case 2 : 
        var column$2 = match[0];
        writeLabel(t, parameter[/* name */0], /* Right */1, /* Top */0, column$2);
        return writeLabel(t, paramString(parameter), /* Right */1, /* Bottom */1, column$2);
    case 3 : 
        var match$1 = match[0];
        var column$3 = match$1[2];
        writeLabel(t, parameter[/* name */0], /* Left */0, /* Top */0, column$3);
        writeLabel(t, paramString(parameter), /* Left */0, /* Bottom */1, column$3);
        return setButton(t, match$1[0], match$1[1], column$3, parameBool(parameter));
    case 4 : 
        var index = paramInt(parameter);
        return $$Array.iteri((function (i, param) {
                      return setButton(t, param[0], param[1], param[2], +(i === index));
                    }), match[0]);
    case 5 : 
        var match$2 = match[0];
        var column$4 = match$2[2];
        writeLabel(t, parameter[/* name */0], /* Left */0, /* Top */0, column$4);
        writeLabel(t, paramString(parameter), /* Left */0, /* Bottom */1, column$4);
        return setButton(t, match$2[0], match$2[1], column$4, parameBool(parameter));
    case 6 : 
        var match$3 = match[0];
        var column$5 = match$3[2];
        writeLabel(t, parameter[/* name */0], /* Left */0, /* Top */0, column$5);
        writeLabel(t, paramString(parameter), /* Left */0, /* Bottom */1, column$5);
        return setButton(t, match$3[0], match$3[1], column$5, parameter[/* pushed */3]);
    case 7 : 
        var match$4 = match[1];
        var match$5 = match[0];
        var column_p = match$5[2];
        writeLabel(t, parameter[/* name */0], /* Left */0, /* Top */0, column_p);
        writeLabel(t, paramString(parameter), /* Left */0, /* Bottom */1, column_p);
        setButton(t, match$5[0], match$5[1], column_p, parameter[/* pushed */3]);
        return setButton(t, match$4[0], match$4[1], match$4[2], parameter[/* pushed */3]);
    case 8 : 
        var column$6 = match[0];
        writeLabel(t, "", /* Left */0, /* Top */0, column$6);
        writeLabel(t, "", /* Left */0, /* Bottom */1, column$6);
        return setRing(t, column$6, 0);
    
  }
}

function groupFind(groups, name) {
  var group_index = [/* None */0];
  $$Array.iteri((function (i, g) {
          if (g[/* name */0] === name) {
            group_index[0] = /* Some */[i];
            return /* () */0;
          } else {
            return 0;
          }
        }), groups);
  var match = group_index[0];
  if (match) {
    return /* Some */[Caml_array.caml_array_get(groups, match[0])];
  } else {
    return /* None */0;
  }
}

function paramFind(groups, group_name, name) {
  var match = groupFind(groups, group_name);
  if (match) {
    var group = match[0];
    var param_index = [/* None */0];
    $$Array.iteri((function (i, p) {
            if (p[/* name */0] === name) {
              param_index[0] = /* Some */[i];
              return /* () */0;
            } else {
              return 0;
            }
          }), group[/* parameters */1]);
    var match$1 = param_index[0];
    if (match$1) {
      return /* Some */[Caml_array.caml_array_get(group[/* parameters */1], match$1[0])];
    } else {
      return /* None */0;
    }
  } else {
    return /* None */0;
  }
}

function groupSetActive(groups, name) {
  var match = groupFind(groups, name);
  if (match) {
    var choke = match[0][/* choke */2];
    return $$Array.map((function (g) {
                  if (g[/* name */0] === name) {
                    return /* record */[
                            /* name */g[/* name */0],
                            /* parameters */g[/* parameters */1],
                            /* choke */g[/* choke */2],
                            /* active : true */1
                          ];
                  } else if (g[/* choke */2] === choke) {
                    return /* record */[
                            /* name */g[/* name */0],
                            /* parameters */g[/* parameters */1],
                            /* choke */g[/* choke */2],
                            /* active : false */0
                          ];
                  } else {
                    return g;
                  }
                }), groups);
  } else {
    return groups;
  }
}

function applyMessageToParam(msg, modified, parameter) {
  var match = parameter[/* kind */1];
  switch (msg.tag | 0) {
    case 0 : 
        if (match.tag === 1) {
          if (msg[0] === match[0]) {
            var new_param = applyAbsValue(parameter, msg[1]);
            return /* tuple */[
                    /* :: */[
                      new_param,
                      modified
                    ],
                    new_param
                  ];
          } else {
            return /* tuple */[
                    modified,
                    parameter
                  ];
          }
        } else {
          return /* tuple */[
                  modified,
                  parameter
                ];
        }
        break;
    case 1 : 
        if (match.tag) {
          return /* tuple */[
                  modified,
                  parameter
                ];
        } else if (msg[0] === match[0]) {
          var new_param$1 = applyRelValue(parameter, msg[1]);
          return /* tuple */[
                  /* :: */[
                    new_param$1,
                    modified
                  ],
                  new_param$1
                ];
        } else {
          return /* tuple */[
                  modified,
                  parameter
                ];
        }
        break;
    case 2 : 
        if (match.tag === 2) {
          if (msg[0] === match[0]) {
            var new_param$2 = applyAbsValue(parameter, msg[1]);
            return /* tuple */[
                    /* :: */[
                      new_param$2,
                      modified
                    ],
                    new_param$2
                  ];
          } else {
            return /* tuple */[
                    modified,
                    parameter
                  ];
          }
        } else {
          return /* tuple */[
                  modified,
                  parameter
                ];
        }
        break;
    case 3 : 
        var value = msg[1];
        var msg_position = msg[0];
        switch (match.tag | 0) {
          case 3 : 
              if (Caml_obj.caml_equal(msg_position, match[0])) {
                var new_param$3 = applyToggleValue(parameter, value);
                return /* tuple */[
                        /* :: */[
                          new_param$3,
                          modified
                        ],
                        new_param$3
                      ];
              } else {
                return /* tuple */[
                        modified,
                        parameter
                      ];
              }
              break;
          case 4 : 
              var match$1 = array_find_index(match[0], msg_position);
              if (match$1) {
                var new_param$4 = applyRadioValue(parameter, match$1[0] + 1 | 0);
                return /* tuple */[
                        /* :: */[
                          new_param$4,
                          modified
                        ],
                        new_param$4
                      ];
              } else {
                return /* tuple */[
                        modified,
                        parameter
                      ];
              }
              break;
          case 5 : 
              if (Caml_obj.caml_equal(msg_position, match[0])) {
                var new_param$5 = applyPushValue(parameter, value);
                return /* tuple */[
                        /* :: */[
                          new_param$5,
                          modified
                        ],
                        new_param$5
                      ];
              } else {
                return /* tuple */[
                        modified,
                        parameter
                      ];
              }
              break;
          case 6 : 
              if (Caml_obj.caml_equal(msg_position, match[0])) {
                var new_param$6 = applyCountValue(parameter, value);
                return /* tuple */[
                        /* :: */[
                          new_param$6,
                          modified
                        ],
                        new_param$6
                      ];
              } else {
                return /* tuple */[
                        modified,
                        parameter
                      ];
              }
              break;
          case 7 : 
              if (Caml_obj.caml_equal(msg_position, match[0])) {
                var new_param$7 = applyPlusMinusValue(parameter, value);
                return /* tuple */[
                        /* :: */[
                          new_param$7,
                          modified
                        ],
                        new_param$7
                      ];
              } else if (Caml_obj.caml_equal(msg_position, match[1])) {
                var new_param$8 = applyPlusMinusValue(parameter, -value | 0);
                return /* tuple */[
                        /* :: */[
                          new_param$8,
                          modified
                        ],
                        new_param$8
                      ];
              } else {
                return /* tuple */[
                        modified,
                        parameter
                      ];
              }
              break;
          default:
            return /* tuple */[
                    modified,
                    parameter
                  ];
        }
        break;
    case 4 : 
        return /* tuple */[
                modified,
                parameter
              ];
    
  }
}

function applyMessageToGroup(msg, modified, group) {
  if (group[/* active */3]) {
    var match = $$Array.fold_left((function (param, p) {
            var match = applyMessageToParam(msg, param[0], p);
            return /* tuple */[
                    match[0],
                    /* :: */[
                      match[1],
                      param[1]
                    ]
                  ];
          }), /* tuple */[
          modified,
          /* [] */0
        ], group[/* parameters */1]);
    return /* tuple */[
            match[0],
            /* record */[
              /* name */group[/* name */0],
              /* parameters */$$Array.of_list(List.rev(match[1])),
              /* choke */group[/* choke */2],
              /* active */group[/* active */3]
            ]
          ];
  } else {
    return /* tuple */[
            modified,
            group
          ];
  }
}

function applyMessage(msg, modified, groups) {
  var match = $$Array.fold_left((function (param, g) {
          var match = applyMessageToGroup(msg, param[0], g);
          return /* tuple */[
                  match[0],
                  /* :: */[
                    match[1],
                    param[1]
                  ]
                ];
        }), /* tuple */[
        modified,
        /* [] */0
      ], groups);
  return /* tuple */[
          match[0],
          $$Array.of_list(List.rev(match[1]))
        ];
}

function compare_parameter(p1, p2) {
  var n = Caml_string.caml_string_compare(p1[/* name */0], p2[/* name */0]);
  if (n !== 0) {
    return n;
  } else {
    var n$1 = Caml_obj.caml_compare(p1[/* kind */1], p2[/* kind */1]);
    if (n$1 !== 0) {
      return n$1;
    } else {
      var v1 = p1[/* value */2];
      var v2 = p2[/* value */2];
      switch (v1.tag | 0) {
        case 1 : 
            switch (v2.tag | 0) {
              case 1 : 
                  return Caml_obj.caml_compare(/* tuple */[
                              v1[1],
                              v1[2],
                              v1[3]
                            ], /* tuple */[
                              v2[1],
                              v2[2],
                              v2[3]
                            ]);
              case 0 : 
              case 2 : 
                  return Caml_obj.caml_compare(v1, v2);
              
            }
            break;
        case 0 : 
        case 2 : 
            return Caml_obj.caml_compare(v1, v2);
        
      }
    }
  }
}

function showGroup(t, group) {
  if (group[/* active */3]) {
    return $$Array.iter((function (p) {
                  return paramDisplay(t, p);
                }), group[/* parameters */1]);
  } else {
    return 0;
  }
}

function updateGroups(t, before, after) {
  if (before.length !== after.length) {
    return $$Array.iter((function (param) {
                  return showGroup(t, param);
                }), after);
  } else {
    return $$Array.iteri((function (i, b) {
                  var t$1 = t;
                  var before = b;
                  var after$1 = Caml_array.caml_array_get(after, i);
                  if (!before[/* active */3] && after$1[/* active */3]) {
                    return showGroup(t$1, after$1);
                  } else if (after$1[/* active */3]) {
                    var t$2 = t$1;
                    var before$1 = before[/* parameters */1];
                    var after$2 = after$1[/* parameters */1];
                    if (before$1.length !== after$2.length) {
                      return $$Array.iter((function (param) {
                                    return paramDisplay(t$2, param);
                                  }), after$2);
                    } else {
                      return $$Array.iteri((function (i, b) {
                                    var t$3 = t$2;
                                    var before = b;
                                    var after$3 = Caml_array.caml_array_get(after$2, i);
                                    if (compare_parameter(before, after$3) !== 0) {
                                      return paramDisplay(t$3, after$3);
                                    } else {
                                      return 0;
                                    }
                                  }), before$1);
                    }
                  } else {
                    return 0;
                  }
                }), before);
  }
}

function percentFormat(min, max, v) {
  return Curry._1(Printf.sprintf(/* Format */[
                  /* Float */Block.__(8, [
                      /* Float_f */0,
                      /* No_padding */0,
                      /* Lit_precision */[2],
                      /* End_of_format */0
                    ]),
                  "%.2f"
                ]), (min + v * (max - min) / 127.0) * 100.0) + " %";
}

function numberFormat(min, max, v) {
  return Curry._1(Printf.sprintf(/* Format */[
                  /* Float */Block.__(8, [
                      /* Float_f */0,
                      /* No_padding */0,
                      /* Lit_precision */[2],
                      /* End_of_format */0
                    ]),
                  "%.2f"
                ]), min + v * (max - min) / 127.0);
}

function numericKnob(name, column, min, max, start) {
  var start$1 = (start - min / (max - min)) * 127.0;
  return /* record */[
          /* name */name,
          /* kind : Knob */Block.__(1, [column]),
          /* value : Float */Block.__(1, [
              numberFormat,
              min,
              max,
              start$1
            ]),
          /* pushed : false */0,
          /* group : None */0
        ];
}

function numericEncoder(name, column, min, max, start) {
  var start$1 = (start - min / (max - min)) * 127.0;
  return /* record */[
          /* name */name,
          /* kind : Encoder */Block.__(0, [column]),
          /* value : Float */Block.__(1, [
              numberFormat,
              min,
              max,
              start$1
            ]),
          /* pushed : false */0,
          /* group : None */0
        ];
}

function numericSlider(name, column, min, max, start) {
  var start$1 = (start - min / (max - min)) * 127.0;
  return /* record */[
          /* name */name,
          /* kind : Slider */Block.__(2, [column]),
          /* value : Float */Block.__(1, [
              numberFormat,
              min,
              max,
              start$1
            ]),
          /* pushed : false */0,
          /* group : None */0
        ];
}

function percentualKnob(name, column, min, max, start) {
  var start$1 = (start - min / (max - min)) * 127.0;
  return /* record */[
          /* name */name,
          /* kind : Knob */Block.__(1, [column]),
          /* value : Float */Block.__(1, [
              percentFormat,
              min,
              max,
              start$1
            ]),
          /* pushed : false */0,
          /* group : None */0
        ];
}

function percentualEncoder(name, column, min, max, start) {
  var start$1 = (start - min / (max - min)) * 127.0;
  return /* record */[
          /* name */name,
          /* kind : Encoder */Block.__(0, [column]),
          /* value : Float */Block.__(1, [
              percentFormat,
              min,
              max,
              start$1
            ]),
          /* pushed : false */0,
          /* group : None */0
        ];
}

function percentualSlider(name, column, min, max, start) {
  var start$1 = (start - min / (max - min)) * 127.0;
  return /* record */[
          /* name */name,
          /* kind : Slider */Block.__(2, [column]),
          /* value : Float */Block.__(1, [
              percentFormat,
              min,
              max,
              start$1
            ]),
          /* pushed : false */0,
          /* group : None */0
        ];
}

function toggleButton(name, side, row, column, start) {
  return /* record */[
          /* name */name,
          /* kind : Toggle */Block.__(3, [/* tuple */[
                side,
                row,
                column
              ]]),
          /* value : Bool */Block.__(0, [start]),
          /* pushed : false */0,
          /* group : None */0
        ];
}

function pushButton(name, side, row, column) {
  return /* record */[
          /* name */name,
          /* kind : Push */Block.__(5, [/* tuple */[
                side,
                row,
                column
              ]]),
          /* value : Bool */Block.__(0, [/* false */0]),
          /* pushed : false */0,
          /* group : None */0
        ];
}

function countButton(name, side, row, column, elems, start) {
  var n = elems.length;
  var start$1 = start - 1.0;
  return /* record */[
          /* name */name,
          /* kind : Count */Block.__(6, [/* tuple */[
                side,
                row,
                column
              ]]),
          /* value : Enum */Block.__(2, [
              elems,
              n,
              start$1
            ]),
          /* pushed : false */0,
          /* group : None */0
        ];
}

function plusMinusButton(name, side_p, row_p, column_p, side_m, row_m, column_m, elems, start) {
  var n = elems.length;
  var start$1 = start - 1.0;
  return /* record */[
          /* name */name,
          /* kind : PlusMinus */Block.__(7, [
              /* tuple */[
                side_p,
                row_p,
                column_p
              ],
              /* tuple */[
                side_m,
                row_m,
                column_m
              ]
            ]),
          /* value : Enum */Block.__(2, [
              elems,
              n,
              start$1
            ]),
          /* pushed : false */0,
          /* group : None */0
        ];
}

function radioButton(name, buttons, elems, start) {
  var n = elems.length;
  var start$1 = start - 1.0;
  return /* record */[
          /* name */name,
          /* kind : Radio */Block.__(4, [buttons]),
          /* value : Enum */Block.__(2, [
              elems,
              n,
              start$1
            ]),
          /* pushed : false */0,
          /* group : None */0
        ];
}

function blank(column) {
  return /* record */[
          /* name */"",
          /* kind : Blank */Block.__(8, [column]),
          /* value : Bool */Block.__(0, [/* false */0]),
          /* pushed : false */0,
          /* group : None */0
        ];
}

function enumEncoder(name, column, elems, start) {
  var n = elems.length;
  var start$1 = start - 1.0;
  return /* record */[
          /* name */name,
          /* kind : Encoder */Block.__(0, [column]),
          /* value : Enum */Block.__(2, [
              elems,
              n,
              start$1
            ]),
          /* pushed : false */0,
          /* group : None */0
        ];
}

function enumKnob(name, column, elems, start) {
  var n = elems.length;
  var start$1 = start - 1.0;
  return /* record */[
          /* name */name,
          /* kind : Knob */Block.__(1, [column]),
          /* value : Enum */Block.__(2, [
              elems,
              n,
              start$1
            ]),
          /* pushed : false */0,
          /* group : None */0
        ];
}

function newGroup(name, choke, active, parameters) {
  var parameters$1 = $$Array.map((function (p) {
          return /* record */[
                  /* name */p[/* name */0],
                  /* kind */p[/* kind */1],
                  /* value */p[/* value */2],
                  /* pushed */p[/* pushed */3],
                  /* group : Some */[name]
                ];
        }), parameters);
  return /* record */[
          /* name */name,
          /* parameters */parameters$1,
          /* choke */choke,
          /* active */active
        ];
}

function update(zero, custom_handler, message) {
  var initial_groups = zero[/* groups */2];
  var match = applyMessage(message, /* [] */0, initial_groups);
  var groups = Curry._2(custom_handler, $$Array.of_list(match[0]), match[1]);
  updateGroups(zero, initial_groups, groups);
  return /* record */[
          /* input */zero[/* input */0],
          /* output */zero[/* output */1],
          /* groups */groups
        ];
}

function handle_messages(zero, custom_handler) {
  var state = [zero];
  return (function (_, data) {
      var message = decode(data);
      state[0] = update(state[0], custom_handler, message);
      return /* () */0;
    });
}

function openPort(name, groups, custom_handler) {
  var match = Remidi.openInput(name);
  var match$1 = Remidi.openOutput(name);
  if (match) {
    var input = match[0];
    if (match$1) {
      var t_001 = /* output */match$1[0];
      var t = /* record */[
        /* input */input,
        t_001,
        /* groups */groups
      ];
      init(t);
      Remidi.onMessage(input, handle_messages(t, custom_handler));
      $$Array.iter((function (param) {
              return showGroup(t, param);
            }), groups);
      return /* Some */[t];
    } else {
      input.closePort();
      return /* None */0;
    }
  } else if (match$1) {
    match$1[0].closePort();
    return /* None */0;
  } else {
    return /* None */0;
  }
}

var Primitives = [
  init,
  clear,
  writeLabel,
  setButton,
  setRing,
  writeLabelRaw,
  setButtonRaw
];

exports.Primitives        = Primitives;
exports.paramName         = paramName;
exports.paramGroup        = paramGroup;
exports.paramPath         = paramPath;
exports.paramString       = paramString;
exports.paramInt          = paramInt;
exports.paramFloat        = paramFloat;
exports.paramFind         = paramFind;
exports.groupSetActive    = groupSetActive;
exports.openPort          = openPort;
exports.numericKnob       = numericKnob;
exports.numericEncoder    = numericEncoder;
exports.numericSlider     = numericSlider;
exports.percentualKnob    = percentualKnob;
exports.percentualEncoder = percentualEncoder;
exports.percentualSlider  = percentualSlider;
exports.toggleButton      = toggleButton;
exports.pushButton        = pushButton;
exports.countButton       = countButton;
exports.plusMinusButton   = plusMinusButton;
exports.radioButton       = radioButton;
exports.enumEncoder       = enumEncoder;
exports.enumKnob          = enumKnob;
exports.blank             = blank;
exports.newGroup          = newGroup;
/* Remidi Not a pure module */
