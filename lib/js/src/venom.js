// Generated by BUCKLESCRIPT VERSION 1.9.1, PLEASE EDIT WITH CARE
'use strict';

var Remidi     = require("./remidi.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function partCode(part) {
  switch (part) {
    case 0 : 
        return 9;
    case 1 : 
        return 11;
    case 2 : 
        return 12;
    case 3 : 
        return 13;
    case 4 : 
        return 14;
    
  }
}

function send(port, part, control, value) {
  port.sendMessage(/* int array */[
        240,
        0,
        1,
        5,
        33,
        0,
        2,
        part,
        0,
        control,
        0,
        value,
        247
      ]);
  return /* () */0;
}

function openPort(port) {
  var match = Remidi.openOutput(port);
  if (match) {
    return /* Some */[/* record */[
              /* port */match[0],
              /* part */9,
              /* key_shape */0
            ]];
  } else {
    return /* None */0;
  }
}

function unset(t, mask) {
  return Pervasives.lnot(mask) & t;
}

function set(t, mask) {
  return mask | t;
}

function setUnsetInverse(t, mask, value) {
  var new_value = value !== 0 ? Pervasives.lnot(mask) & t[/* key_shape */2] : mask | t[/* key_shape */2];
  t[/* key_shape */2] = new_value;
  return new_value;
}

function setUnset(t, mask, value) {
  var new_value = value !== 0 ? mask | t[/* key_shape */2] : Pervasives.lnot(mask) & t[/* key_shape */2];
  t[/* key_shape */2] = new_value;
  return new_value;
}

function setOsc1Level(t, value) {
  return send(t[/* port */0], t[/* part */1], 100, value);
}

function setOsc1Keytrack(t, value) {
  var value$1 = setUnsetInverse(t, 8, value);
  return send(t[/* port */0], t[/* part */1], 24, value$1);
}

function setOsc1Wave(t, value) {
  return send(t[/* port */0], t[/* part */1], 26, value);
}

function setOsc1Coarse(t, value) {
  return send(t[/* port */0], t[/* part */1], 27, value);
}

function setOsc1Fine(t, value) {
  return send(t[/* port */0], t[/* part */1], 28, value);
}

function setOsc2Level(t, value) {
  return send(t[/* port */0], t[/* part */1], 101, value);
}

function setOsc2Keytrack(t, value) {
  var value$1 = setUnsetInverse(t, 16, value);
  return send(t[/* port */0], t[/* part */1], 24, value$1);
}

function setOsc2Wave(t, value) {
  return send(t[/* port */0], t[/* part */1], 29, value);
}

function setOsc2Coarse(t, value) {
  return send(t[/* port */0], t[/* part */1], 30, value);
}

function setOsc2Fine(t, value) {
  return send(t[/* port */0], t[/* part */1], 31, value);
}

function setOsc2Sync(t, value) {
  var value$1 = setUnset(t, 2, value);
  return send(t[/* port */0], t[/* part */1], 24, value$1);
}

function setStartMod(t, value) {
  return send(t[/* port */0], t[/* part */1], 19, value);
}

function setOsc1FM3(t, value) {
  return send(t[/* port */0], t[/* part */1], 23, value);
}

function setWaveshape(t, value) {
  var state = setUnset(t, 1, value);
  send(t[/* port */0], t[/* part */1], 24, state);
  return send(t[/* port */0], t[/* part */1], 25, value);
}

function setFilterBoost(t, value) {
  return send(t[/* port */0], t[/* part */1], 32, value);
}

function setFilterType(t, value) {
  return send(t[/* port */0], t[/* part */1], 105, value);
}

function setCutoff(t, value) {
  send(t[/* port */0], t[/* part */1], 106, value);
  return send(t[/* port */0], t[/* part */1], 107, value);
}

function setResonance(t, value) {
  return send(t[/* port */0], t[/* part */1], 108, value);
}

exports.partCode        = partCode;
exports.send            = send;
exports.openPort        = openPort;
exports.unset           = unset;
exports.set             = set;
exports.setUnsetInverse = setUnsetInverse;
exports.setUnset        = setUnset;
exports.setOsc1Level    = setOsc1Level;
exports.setOsc1Keytrack = setOsc1Keytrack;
exports.setOsc1Wave     = setOsc1Wave;
exports.setOsc1Coarse   = setOsc1Coarse;
exports.setOsc1Fine     = setOsc1Fine;
exports.setOsc2Level    = setOsc2Level;
exports.setOsc2Keytrack = setOsc2Keytrack;
exports.setOsc2Wave     = setOsc2Wave;
exports.setOsc2Coarse   = setOsc2Coarse;
exports.setOsc2Fine     = setOsc2Fine;
exports.setOsc2Sync     = setOsc2Sync;
exports.setStartMod     = setStartMod;
exports.setOsc1FM3      = setOsc1FM3;
exports.setWaveshape    = setWaveshape;
exports.setFilterBoost  = setFilterBoost;
exports.setFilterType   = setFilterType;
exports.setCutoff       = setCutoff;
exports.setResonance    = setResonance;
/* Remidi Not a pure module */
