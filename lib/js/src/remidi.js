// Generated by BUCKLESCRIPT VERSION 1.9.1, PLEASE EDIT WITH CARE
'use strict';

var Midi    = require("midi");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry   = require("bs-platform/lib/js/curry.js");

function list_init(n, f) {
  var _n = n - 1 | 0;
  var _acc = /* [] */0;
  while(true) {
    var acc = _acc;
    var n$1 = _n;
    if (n$1 < 0) {
      return acc;
    } else {
      _acc = /* :: */[
        Curry._1(f, n$1),
        acc
      ];
      _n = n$1 - 1 | 0;
      continue ;
      
    }
  };
}

function list_find_index(f, l) {
  var _index = 0;
  var _l = l;
  while(true) {
    var l$1 = _l;
    var index = _index;
    if (l$1) {
      if (Curry._1(f, l$1[0])) {
        return /* Some */[index];
      } else {
        _l = l$1[1];
        _index = index + 1 | 0;
        continue ;
        
      }
    } else {
      return /* None */0;
    }
  };
}

function getInputNames() {
  var temp = new Midi.input();
  var n = temp.getPortCount();
  var result = list_init(n, (function (param) {
          return temp.getPortName(param);
        }));
  temp.closePort();
  return result;
}

function getOutputNames() {
  var temp = new Midi.output();
  var n = temp.getPortCount();
  var result = list_init(n, (function (param) {
          return temp.getPortName(param);
        }));
  temp.closePort();
  return result;
}

function openInput(name) {
  var inputs = getInputNames(/* () */0);
  var match = list_find_index((function (port) {
          return +(port === name);
        }), inputs);
  if (match) {
    var index = match[0];
    var input = new Midi.input();
    console.log("Opening input '" + (input.getPortName(index) + "'"));
    input.openPort(index);
    return /* Some */[input];
  } else {
    return /* None */0;
  }
}

function openOutput(name) {
  var outputs = getOutputNames(/* () */0);
  var match = list_find_index((function (port) {
          return +(port === name);
        }), outputs);
  if (match) {
    var index = match[0];
    var output = new Midi.output();
    console.log("Opening output '" + (output.getPortName(index) + "'"));
    output.openPort(index);
    return /* Some */[output];
  } else {
    return /* None */0;
  }
}

function sendMessageList(output, msg) {
  output.sendMessage($$Array.of_list(msg));
  return /* () */0;
}

function onMessage(input, callback) {
  input.on("message", callback);
  return /* () */0;
}

function ignoreTypes(input, sysex, timing, activesense) {
  input.ignoreTypes(sysex, timing, activesense);
  return /* () */0;
}

exports.list_init       = list_init;
exports.list_find_index = list_find_index;
exports.getInputNames   = getInputNames;
exports.getOutputNames  = getOutputNames;
exports.openInput       = openInput;
exports.openOutput      = openOutput;
exports.sendMessageList = sendMessageList;
exports.onMessage       = onMessage;
exports.ignoreTypes     = ignoreTypes;
/* midi Not a pure module */
